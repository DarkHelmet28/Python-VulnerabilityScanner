import portscanner

# def get_arguments():
#     """Get arguments from the command line"""
#     parser = arg.ArgumentParser()
#     parser.add_argument('-t', '--target', dest='target', help='The target/s IP or Hostname (split multiple targets with ,)')
#     parser.add_argument('-tm', '--timeout', dest='timeout', help='Timeout for the port connection. Lower the timeout, lower the accuracy of the scan. Use "None" for unlimited time (default: 0.5)', default=0.5)
#     parser.add_argument('-p', '--ports', dest='ports', help='Port/s to scan. Use "-" to separate range of ports. Use "None" for all ports (default: 1-100)', default='1-100')
#     options = parser.parse_args()
#     if not options.target:
#         options = None
#     return options

target = targets = input('\n[>] Enter Target/s To Scan for Vulnerable Open Ports (split multiple targets with ,): ')
port_number = int(input('[>] Enter the amount of ports to Scan For (500 - first 500 ports): '))
vul_file = input('[>] Enter Path to File containing Vulnerable Softwares: ')
print('\n')

target = portscanner.PortScan(target, port_number)
target.scan()

with open(vul_file, 'r') as file:
    count = 0
    for banner in target.banners:
        file.seek(0)
        for line in file.readlines():
            if line.strip() in banner:
                print(f'[!!] VULNERABLE BANNER: "{banner}" ON PORT: {target.open_ports[count]}')
        count += 1






















# def main(targets, ports='1-100', timeout=0.5):
#     if COMMA in targets:
#         for ip in targets.split(COMMA):
#             scan(ip.strip(), ports, timeout)
#     else:
#         scan(targets, ports, timeout)

# if __name__ == '__main__':
#     if optionsValues:
#         main(optionsValues.target, optionsValues.ports, optionsValues.timeout)
#     else:
#         targets = input('\n[>] Enter Target/s To Scan (split multiple targets with ,): ')
#         main(targets)
